/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;

import domain.Kasir;
import javax.swing.JOptionPane;
import logic.Controller;

/**
 *
 * @author Djapac
 */
public class FrmLogin extends javax.swing.JFrame {

    /**
     * Creates new form FrmLogin
     */
    public FrmLogin() {
        initComponents();
        setTitle("Login");
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Korisničko ime: ");

        jLabel2.setText("Lozinka: ");

        btnLogin.setText("Prijavi se");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUsername))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .addComponent(txtPassword))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        
        String username = txtUsername.getText().trim();
        String password = String.valueOf(txtPassword.getText().trim());
        
        if(validacija(username,password)){
            
            try {
                Kasir kasir = new Kasir(username, password);
             
                kasir = Controller.getInstance().login(kasir);
                
                
                JOptionPane.showMessageDialog(this, "Sistem je prijavio zaposlenog kasira i omogućio pristup sistemu [Kasir: "+kasir+"]", "Login", JOptionPane.INFORMATION_MESSAGE);
                new FrmMain(kasir).setVisible(true);
                
                dispose();
                
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti podatke o prijavljivanju." , "Greška", JOptionPane.ERROR_MESSAGE);
                this.dispose();
            }
            
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private boolean validacija(String username, String password) {
        boolean uspesno = true;
       
       Kasir kasir = new Kasir();
       kasir.setKorisnickoIme(username);
       kasir.setLozinka(username);
       
        try {
            if(Controller.getInstance().getListaPrijavljenih().contains(kasir)){
                JOptionPane.showMessageDialog(this, "Kasir sa ovim podacima već postoji!");
                uspesno = false;
            }} catch (Exception ex) {
                 JOptionPane.showMessageDialog(this, "Kasir sa ovim podacima postoji!", "Greška", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti podatke o prijavljivanju." , "Greška", JOptionPane.ERROR_MESSAGE);
                this.dispose();
        }
       
       if(username.isEmpty()){
            JOptionPane.showMessageDialog(this, "Popunite polje za korisničko ime!");
            uspesno = false;
       }
       if (password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Popunite polje za lozinku!");
            uspesno = false;
        }

        if (!username.isEmpty()) {
            if (username.length() < 4) {
                JOptionPane.showMessageDialog(this, "Korisničko ime mora da sadrzi najmanje 4 karaktera");
                uspesno = false;
            }
        }
        
        if (!password.isEmpty()) {
            if (password.length() < 4) {
                JOptionPane.showMessageDialog(this, "Lozinka mora da sadrži najmanje 4 karaktera");
                uspesno = false;
            }
        }
        
        if (!username.isEmpty()) {
            if (username.length() > 20) {
                JOptionPane.showMessageDialog(this, "Korisnicko ime može da sadrži najviše 20 karkatera");
                uspesno = false;
            }
        }
        
        if (!password.isEmpty()) {
            if (password.length() > 20) {
                JOptionPane.showMessageDialog(this, "Lozinka može da sadrži najviše 20 karkatera");
                uspesno = false;
            }
        }
       
       
       return uspesno;
    }
}

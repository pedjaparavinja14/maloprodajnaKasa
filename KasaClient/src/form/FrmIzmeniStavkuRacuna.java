/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;

import domain.Racun;
import domain.StatusRacuna;
import domain.StavkaRacuna;
import java.util.ArrayList;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logic.Controller;
import model.ModelTabeleStavke;

/**
 *
 * @author Djapac
 */
public class FrmIzmeniStavkuRacuna extends javax.swing.JFrame {

    Racun racun;
    List<StavkaRacuna> listaStavki;
    
    
    /**
     * Creates new form FrmIzmeniStavkuRacuna
     */
    public FrmIzmeniStavkuRacuna() {
        initComponents();
    }

    FrmIzmeniStavkuRacuna(Racun racun) {
        initComponents();
        this.racun = racun;
        setLocationRelativeTo(null);
        setTitle("Izmena stavke računa");
        listaStavki = vratiStavke();
        
        this.racun.setListaStavki(listaStavki);
        ModelTabeleStavke mts = new ModelTabeleStavke(listaStavki);
        tblStavke.setModel(mts);
        srediStavke();
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblStavke = new javax.swing.JTable();
        btnObrisiStavku = new javax.swing.JButton();
        btnIzmeniStavku = new javax.swing.JButton();
        btnIzadji = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtArtikal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCena = new javax.swing.JTextField();
        txtKolicina = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnSacuvaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblStavke.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStavke);

        btnObrisiStavku.setText("Obriši stavku");
        btnObrisiStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiStavkuActionPerformed(evt);
            }
        });

        btnIzmeniStavku.setText("Izmeni stavku");
        btnIzmeniStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniStavkuActionPerformed(evt);
            }
        });

        btnIzadji.setText("Izađi");
        btnIzadji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzadjiActionPerformed(evt);
            }
        });

        jLabel1.setText("Artikal: ");

        jLabel2.setText("Cena: ");

        jLabel3.setText("Količina: ");

        btnSacuvaj.setText("Pošalji izmenu u bazu");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtArtikal, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnObrisiStavku, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(btnIzmeniStavku, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(btnIzadji, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(btnSacuvaj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCena, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtKolicina, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(272, 272, 272)
                .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnIzmeniStavku, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnObrisiStavku, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnIzadji, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtArtikal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCena, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKolicina, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIzadjiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzadjiActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnIzadjiActionPerformed

    private void btnObrisiStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiStavkuActionPerformed
        // TODO add your handling code here:
        int red = tblStavke.getSelectedRow();
        
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da učita podatke o odabranoj stavki", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            try {
                ModelTabeleStavke mts = (ModelTabeleStavke) tblStavke.getModel();
                StavkaRacuna st = mts.getStavkaRacuna(red);
                st.setStatusRacuna(StatusRacuna.BRISANJE);
                
                
                for(StavkaRacuna stavka : listaStavki){
                    if(stavka.getRedniBroj() == st.getRedniBroj()){
                        stavka.setStatusRacuna(StatusRacuna.BRISANJE);

                    }
                }
//                List<StavkaRacuna> listaZaBrisanje = new ArrayList<>();
//                listaZaBrisanje.add(st);
//                
//                racun.setListaStavki(listaZaBrisanje);
//                
//                Controller.getInstance().updateBill(racun);


JOptionPane.showMessageDialog(this, "Sistem je spremio stavku za brisanje!", "Brisanje podataka stavke računa", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                Logger.getLogger(FrmIzmeniStavkuRacuna.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
    }//GEN-LAST:event_btnObrisiStavkuActionPerformed

    private void btnIzmeniStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniStavkuActionPerformed
        // TODO add your handling code here:
        int red = tblStavke.getSelectedRow();
        
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da učita podatke o odabranoj stavci", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            try {
               
                ModelTabeleStavke mts = (ModelTabeleStavke) tblStavke.getModel();
                StavkaRacuna sr = mts.getStavkaRacuna(red);
                
               
                sr.setArtikal(txtArtikal.getText().trim());
                sr.setCena(Double.parseDouble(txtCena.getText().trim()));
                sr.setKolicina(Integer.parseInt(txtKolicina.getText().trim()));
                sr.setStatusRacuna(StatusRacuna.IZMENJEN);
                
                for(StavkaRacuna stavka : listaStavki){
                    if(stavka.getRedniBroj() == sr.getRedniBroj()){
                        sr.setArtikal(txtArtikal.getText().trim());
                        sr.setCena(Double.parseDouble(txtCena.getText().trim()));
                        sr.setKolicina(Integer.parseInt(txtKolicina.getText().trim()));
                        sr.setStatusRacuna(StatusRacuna.IZMENJEN);
                        
                    }
                }
              
//                List<StavkaRacuna> listaZaIzmenu = new ArrayList<>();
//                racun.setListaStavki(listaZaIzmenu);
//                
//            //racun.setListaStavki(listaStavki);
//                Controller.getInstance().updateBill(racun);
//               
                
                
                
                
                JOptionPane.showMessageDialog(this, "Sistem je izmenio stavku rezervacije!", "Izmena podataka rezervacije", JOptionPane.INFORMATION_MESSAGE);
               
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da izmeni rezervaciju" ,"Greška", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        
        
        
    }//GEN-LAST:event_btnIzmeniStavkuActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        // TODO add your handling code here:
        
        try {
            // TODO add your handling code here:
            
            if(listaStavki.isEmpty()){
                JOptionPane.showMessageDialog(this, "Prazna lista stavki!" ,"Greška", JOptionPane.ERROR_MESSAGE);
                return;
            }

            System.out.println(listaStavki);
            
          
            
            List<StavkaRacuna> listaZaSlanje = new ArrayList<>();
            for(StavkaRacuna sr : listaStavki){
                if(sr.getStatusRacuna() != StatusRacuna.KREIRAN){
                    listaZaSlanje.add(sr);
                }
            }
            racun.setListaStavki(listaZaSlanje);
            System.out.println(listaZaSlanje);
            
            Controller.getInstance().updateBill(racun);
            
            JOptionPane.showMessageDialog(this, "Sistem je izmenio račun!", "Izmena podataka računa", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (Exception ex) {
           JOptionPane.showMessageDialog(this, "Sistem ne može da izmeni račun" ,"Greška", JOptionPane.ERROR_MESSAGE);
        }
        
        
    }//GEN-LAST:event_btnSacuvajActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzadji;
    private javax.swing.JButton btnIzmeniStavku;
    private javax.swing.JButton btnObrisiStavku;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblStavke;
    private javax.swing.JTextField txtArtikal;
    private javax.swing.JTextField txtCena;
    private javax.swing.JTextField txtKolicina;
    // End of variables declaration//GEN-END:variables

    private List<StavkaRacuna> vratiStavke() {
        try {
            StavkaRacuna sr = new StavkaRacuna();
            sr.setRacun(racun);
            //System.out.println(racun);
            
            List<StavkaRacuna> lista = Controller.getInstance().findBillItems(sr);
            return lista;
           
        } catch (Exception ex) {
            Logger.getLogger(FrmIzmeniStavkuRacuna.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    
    private void srediStavke() {
        
        for(StavkaRacuna sr : listaStavki){
            sr.setStatusRacuna(StatusRacuna.KREIRAN);
        }
    }
}
